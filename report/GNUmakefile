###############################################################################
# PoP-Specific Makefile
# This makefile is used for PoP-assignments for the following things:
# - Generate the pdf ("make" or "make pdf")
# - Zip the assignment ("make zip" or "make genafl")
# - Spellchecking with aspell ("make spellcheck")
# - Running every .fsx file ("make test")
#
# If there is no syntax-highlighting, then it's probably because you have 
# opened the template (Assign00/makefile.pop).
# Run "make" in the current dir, and then open Assign00/pop/makefile instead.
###############################################################################

OUTPUT=master.pdf
CFLAGS=--output-directory=build -file-line-error -halt-on-error -interaction=nonstopmode -shell-escape 
BFLAGS=--output-directory=build #--output_safechars #--output-encoding=UTF-8 
CC=lualatex
NOSPELLCHECK:=report.tex lstconfig.tex preamble.tex master.tex
WRITEGOODFLAGS:=--yes-eprime --no-passive

# makefile-rules that don't produce files directly
.PHONY: pdf zip spellcheck clean

# --- Aliases ---
# first rule in file means it is executed when you just write "make" 
pdf: master.pdf

# The 'X's should be replaced with the assignments number
zip: report.zip
# --- End of aliases ---

# -- Actual rules ---

# this creates the pdf by running pdflatex twice
# https://en.wikibooks.org/wiki/LaTeX/Bibliography_Management#Why_won't_LaTeX_generate_any_output?
$(OUTPUT): *.tex *.bib GNUmakefile
	#rm build/$(@:.pdf=.aux)
	$(CC) $(CFLAGS) $(@:.pdf=.tex)
	biber $(BFLAGS) $(basename $@)
	$(CC) $(CFLAGS) $(@:.pdf=.tex)
	$(CC) $(CFLAGS) $(@:.pdf=.tex)
	#$(MAKE) normalsider

# this zips the pdf, every .tex-file and every .fsx-file,
# so the assignment can be turned in on Absalon.
# The 'X' should be replaced with the assignments number.
report.zip: master.pdf *.tex *.fsx
	zip $@ master.pdf *.tex *.fsx

xz: zip



#draft
draft: *.tex
	# inject \usepackage{draft}
	$(CC) $(CFLAGS) $(OUTPUT:.pdf=.tex)
	#$(MAKE) normalsider


# this runs every .fsx-file
test: *.fsx
	for FILE in $(wildcard *.fsx); do \
            fsharpi --exec $$FILE; \
        done

# This runs spellcheck on the latex-files.
# $(filter-out master.tex, ...) is used to remove master.tex 
# from the list of files that are spellchecked.
# $(wildcard *.tex) is used to collect all latex-files
aspell: $(filter-out master.tex, $(wildcard *.tex))
	for FILE in $^; do \ # This executes aspell on all files
	                   \ # using the config "aspell.conf"
	    aspell --conf="./aspell.conf" check \
	done

hunspell: $(sort $(filter-out $(NOSPELLCHECK), $(wildcard *.tex)))
	@$(foreach FILE, $^, \
	    echo "\n-----" $(FILE) "-----\n"; \
	    hunspell -p dictionary.txt -t -l $(FILE);)
	@echo "Please correct or append these words to your user dictionary."

ispell: $(sort $(filter-out $(NOSPELLCHECK), $(wildcard *.tex)))
	@$(foreach FILE, $^, \
	    echo "\n-----" $(FILE) "-----\n"; \
	    ispell -p dictionary.txt -t -l $(FILE);)
	@echo "Please correct or append these words to your user dictionary."

write-good1: $(sort $(filter-out $(NOSPELLCHECK), $(wildcard *.tex)))
	@$(foreach FILE, $^, \
	    echo "\n-----" $(FILE) "-----\n"; \
	    write-good $(WRITEGOODFLAGS) $(FILE);)

write-good2: $(sort $(filter-out $(NOSPELLCHECK), $(wildcard *.tex)))
	@$(foreach FILE, $^, \
	    echo "\n-----" $(FILE) "-----\n"; \
	    detex $(FILE) | write-good $(WRITEGOODFLAGS) /dev/stdin; )

texcount: *.tex
	texcount *.tex

wc: $(filter-out $(NOSPELLCHECK), $(wildcard *.tex)) 
	cat ?.tex | detex | tr -d '[:space:]' |  wc --chars
#	detex $^ | wc

progress: $(filter-out $(NOSPELLCHECK), $(wildcard *.tex)) 
	cat ?.tex | detex | tr -d '[:space:]' | wc --chars | cat <(echo -n " 100/( 4 * 2400 ) * ") - | tee /dev/tty | bc -ql
#	detex $^ | wc

# this rule is used to remove all files generated by make
# make best-practices suggest you have one of these
clean:
	mv missfont.log build/
	git clean -X -n build/
	rm -v build/*
	#latexrun --clean-all


#chktex: $(filter-out $(NOSPELLCHECK), $(wildcard *.tex)) 
chktex: $(wildcard *.tex)
	chktex $^

# Check opendetex
# npm install writegood?
writegood:
	detex | node --writegood

latexmk:
	echo "Not implemented"

latexrun:
	echo "Not implemented"

help: 
	echo "The following targets are available:"

lix:
	echo "Not implemented"

# for i in {1..3}; do cat $i.tex | detex | tr -d '[:space:]' |  wc --chars; done
# cat ?.tex | detex | tr -d '[:space:]' |  wc --chars | tr -d '\n' | cat <(echo -n "scale=2;") - <(echo -n "/(2400)\n")  | tee /dev/tty | bc -ql
#| cat `echo -n "scale=2;"` - `echo -n "/2400\n"` 
#| tee /dev/tty 
normalsider: ?.tex
	echo "Fordeling af normalsider à 2400 anslag uden mellemrum:"
	@$(foreach FILE, $(sort $^), \
	    echo -n  $(FILE) ": "; \
	    detex $(FILE) \
	    | tr -d '[:space:]' \
	    | wc --chars \
	    | tr -d '\n' \
	    | awk '{print "scale=2;" $$1 "/2400"}' \
	    | bc -ql;)
	$(MAKE) totalnormalsider

totalnormalsider: ?.tex
	echo -n "Total : "
	detex $^ \
	| tr -d '[:space:]' \
	| wc --chars \
	| tr -d '\n' \
	| awk '{print "scale=2;" $$1 "/2400"}' \
	| bc -ql

anonymize: 
	#https://gist.github.com/hubgit/6078384

#Tæl normalside: 2400 ord/s ifølge Pernille Bjørns UIS2018 slides til første forelæsnig.
uispages: ?.tex
	echo "Fordeling af normalsider à 400 ord:"
	@$(foreach FILE, $(sort $^), \
	    echo -n  $(FILE) ": "; \
	    detex $(FILE) \
	    | wc --words \
	    | tr -d '\n' \
	    | awk '{print "scale=2;" $$1 "/400"}' \
	    | bc -ql;)


