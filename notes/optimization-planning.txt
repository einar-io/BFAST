
  bfast_step_1 took      10.40 us (average of 10 runs)
  bfast_step_2 took   17090.60 us (average of 10 runs)
  bfast_step_3 took    2915.70 us (average of 10 runs)
 bfast_step_4a took    5902.60 us (average of 10 runs)
 bfast_step_4b took     400.40 us (average of 10 runs)
 bfast_step_4c took   10918.50 us (average of 10 runs)
  bfast_step_5 took    5173.20 us (average of 10 runs)
  bfast_step_6 took    6000.90 us (average of 10 runs)
 bfast_step_7a took    3313.00 us (average of 10 runs)
 bfast_step_7b took       9.80 us (average of 10 runs)
  bfast_step_8 took    6785.90 us (average of 10 runs)
total: 58521


Worth looking at:
  step_4a
  step_4b
  step_4c

Meh:
  step_3
  step_7a   (reduce)
  step_5
  step_6    (reduce)
  step_8

Not worth looking at much:
  step_1
  step_2
  step_7b







Jakob: reduce

pmph-bog coalesced access einar


--------------------------------------------------------------------------------

after step_2 tiling
  bfast_step_1 took      14.10 us (average of 50 runs)
  bfast_step_2 took   14864.94 us (average of 50 runs)
  bfast_step_3 took    2822.14 us (average of 50 runs)
 bfast_step_4a took    5899.26 us (average of 50 runs)
 bfast_step_4b took     397.70 us (average of 50 runs)
 bfast_step_4c took    4714.90 us (average of 50 runs)
  bfast_step_5 took    5048.08 us (average of 50 runs)
  bfast_step_6 took    5826.88 us (average of 50 runs)
 bfast_step_7a took    3259.72 us (average of 50 runs)
 bfast_step_7b took      15.96 us (average of 50 runs)
  bfast_step_8 took    6617.70 us (average of 50 runs)
total: 49481.38

after step_2 shared mem
  bfast_step_1 took      52.62 us (average of 50 runs)
  bfast_step_2 took    2667.78 us (average of 50 runs)
  bfast_step_3 took    2876.60 us (average of 50 runs)
 bfast_step_4a took    5924.60 us (average of 50 runs)
 bfast_step_4b took     406.28 us (average of 50 runs)
 bfast_step_4c took    4780.72 us (average of 50 runs)
  bfast_step_5 took    5186.82 us (average of 50 runs)
  bfast_step_6 took    5929.76 us (average of 50 runs)
 bfast_step_7a took    3308.60 us (average of 50 runs)
 bfast_step_7b took      29.12 us (average of 50 runs)
  bfast_step_8 took    6766.82 us (average of 50 runs)
total: ~37923

after coalesced access (2 slower, 4a faster, overall faster):
  bfast_step_1 took      17.06 us (average of 50 runs)
  bfast_step_2 took    4106.02 us (average of 50 runs)
  bfast_step_3 took    2850.18 us (average of 50 runs)
 bfast_step_4a took    1497.48 us (average of 50 runs)
 bfast_step_4b took     391.86 us (average of 50 runs)
 bfast_step_4c took    4748.86 us (average of 50 runs)
  bfast_step_5 took    5104.12 us (average of 50 runs)
  bfast_step_6 took    5834.68 us (average of 50 runs)
 bfast_step_7a took    3262.96 us (average of 50 runs)
 bfast_step_7b took      23.36 us (average of 50 runs)
  bfast_step_8 took    6686.42 us (average of 50 runs)
total: ~34500


if 4a can somehow be made faster in a way that uses Y instead of Yt, this last
optimization to step_2 becomes a performance loss


--- Reusing shared mem (prolonged runtime), using intrinsic functions and more
arrays to copied to shared mem.

  bfast_step_1 took      17.54 us (average of 50 runs)
  bfast_step_2 took    4011.52 us (average of 50 runs)
  bfast_step_3 took    2705.10 us (average of 50 runs)
  bfast_step_4a took    1689.20 us (average of 50 runs)
  bfast_step_4b took     518.28 us (average of 50 runs)
  bfast_step_4c took    2701.12 us (average of 50 runs)
  bfast_step_5 took    5171.96 us (average of 50 runs)
  bfast_step_6 took    6598.22 us (average of 50 runs)
  bfast_step_7a took    3495.60 us (average of 50 runs)
  bfast_step_7b took      13.44 us (average of 50 runs)
  bfast_step_8 took    5985.52 us (average of 50 runs)
total: 32907.5
